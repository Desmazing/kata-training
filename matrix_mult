# the first implementation is a very manual way of solving [2X2] and [3X3] matrices
# method 2 leverages numpy library to multiply matrices of any dimension. test cases not run yet
# the second method has not been attempted on insanely large matrices yet

import numpy as np


def matrix_mult(A, B):    
    if len(A) == 2:
        C = [[0,0], [0,0]]
        C[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0]
        C[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1]
        C[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0]
        C[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1]
    elif len(A) == 3:
        C = [[0,0,0],[0,0,0],[0,0,0]]
        C[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0]
        C[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1]
        C[0][2] = A[0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2]
        C[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0]
        C[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1]
        C[1][2] = A[1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2]
        C[2][0] = A[2][0] * B[0][0] + A[2][1] * B[1][0] + A[2][2] * B[2][0]
        C[2][1] = A[2][0] * B[0][1] + A[2][1] * B[1][1] + A[2][2] * B[2][1]
        C[2][2] = A[2][0] * B[0][2] + A[2][1] * B[1][2] + A[2][2] * B[2][2]
    return C


def matrix_multiply(a,b):
    result = np.matmul(a,b)
    return result

test_case1 = [[2,3,4], [1,2,3], [3,4,2],]
test_case2 = [[1,2], [2,3]]

print(matrix_mult(test_case2, test_case2))
print(matrix_multiply(test_case2, test_case2))
